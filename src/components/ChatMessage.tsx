import React from 'react';
import { Box, Avatar } from '@mui/material';
import { ChatMessage as ChatMessageType } from '../types/chat';
import { ChatBot, User } from '../assets/svg';
import '../assets/styles/ChatMessage.scss';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';

interface Props {
  message: ChatMessageType;
}

export const ChatMessage: React.FC<Props> = ({ message }) => {
  const isUser = message.sender === 'user';
  
  return (
    <Box className={`chat-message ${isUser ? 'chat-message--user' : ''}`}>
      <Avatar
        className={`icon-wrapper chat-message__avatar ${!isUser ? 'chat-message__avatar--assistant' : ''}`}
      >
        {isUser ? <User width="30px" height="30px" /> : <ChatBot width="30px" height="30px" />}
      </Avatar>
      
      <Box
        className={`chat-message__bubble ${isUser ? 'chat-message__bubble--user' : 'chat-message__bubble--assistant'} ${message.isImage ? 'chat-message__bubble--image' : ''}`}
        aria-label={isUser ? 'User message' : 'Assistant message'}
      >
        {message.isImage ? (
          <img src={message.text} alt="Generated by AI" className="chat-message__image" />
        ) : (
          <div className="chat-message__text">
            <ReactMarkdown
              remarkPlugins={[remarkGfm]}
              components={{
                code({ node, className, children, ...props }) {
                  const match = /language-(\w+)/.exec(className || '');
                  return match ? (
                    <SyntaxHighlighter
                      className="code-block"
                      style={atomDark}
                      language={match[1]}
                      PreTag="div"
                    >
                      {String(children).replace(/\n$/, '')}
                    </SyntaxHighlighter>
                  ) : (
                    <code className={className} {...props}>
                      {children}
                    </code>
                  );
                },
              }}
            >
              {message.text}
            </ReactMarkdown>
          </div>
        )}
      </Box>
    </Box>
  );
}; 